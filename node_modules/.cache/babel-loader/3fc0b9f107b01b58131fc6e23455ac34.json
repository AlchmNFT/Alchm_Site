{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:\\\\Users\\\\magnu\\\\s\\\\projects\\\\solidity\\\\Alchm_Site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\magnu\\\\s\\\\projects\\\\solidity\\\\Alchm_Site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\magnu\\\\s\\\\projects\\\\solidity\\\\Alchm_Site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\magnu\\\\s\\\\projects\\\\solidity\\\\Alchm_Site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\magnu\\\\s\\\\projects\\\\solidity\\\\Alchm_Site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\magnu\\\\s\\\\projects\\\\solidity\\\\Alchm_Site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _superPropGet(t, e, o, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), e, o); return 2 & r && \"function\" == typeof p ? function (t) { return p.apply(o, t); } : p; }\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction) {\n  var result = {};\n  for (var key in transaction) {\n    if (transaction[key] == null) {\n      continue;\n    }\n    var value = transaction[key];\n    if (key === \"type\" && value === 0) {\n      continue;\n    }\n    // Quantity-types require no leading zero, unless 0\n    if ({\n      type: true,\n      gasLimit: true,\n      gasPrice: true,\n      maxFeePerGs: true,\n      maxPriorityFeePerGas: true,\n      nonce: true,\n      value: true\n    }[key]) {\n      value = hexValue(hexlify(value));\n    } else if (key === \"accessList\") {\n      value = \"[\" + accessListify(value).map(function (set) {\n        return \"{address:\\\"\".concat(set.address, \"\\\",storageKeys:[\\\"\").concat(set.storageKeys.join('\",\"'), \"\\\"]}\");\n      }).join(\",\") + \"]\";\n    } else {\n      value = hexlify(value);\n    }\n    result[key] = value;\n  }\n  return result;\n}\nfunction getResult(result) {\n  // getLogs, getHistory have weird success responses\n  if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n    return result.result;\n  }\n  if (result.status != 1 || typeof result.message !== \"string\" || !result.message.match(/^OK/)) {\n    var error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n    if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n      error.throttleRetry = true;\n    }\n    throw error;\n  }\n  return result.result;\n}\nfunction getJsonResult(result) {\n  // This response indicates we are being throttled\n  if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n    var error = new Error(\"throttled response\");\n    error.result = JSON.stringify(result);\n    error.throttleRetry = true;\n    throw error;\n  }\n  if (result.jsonrpc != \"2.0\") {\n    // @TODO: not any\n    var _error = new Error(\"invalid response\");\n    _error.result = JSON.stringify(result);\n    throw _error;\n  }\n  if (result.error) {\n    // @TODO: not any\n    var _error2 = new Error(result.error.message || \"unknown error\");\n    if (result.error.code) {\n      _error2.code = result.error.code;\n    }\n    if (result.error.data) {\n      _error2.data = result.error.data;\n    }\n    throw _error2;\n  }\n  return result.result;\n}\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag) {\n  if (blockTag === \"pending\") {\n    throw new Error(\"pending not supported\");\n  }\n  if (blockTag === \"latest\") {\n    return blockTag;\n  }\n  return parseInt(blockTag.substring(2), 16);\n}\nfunction checkError(method, error, transaction) {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n    var e = error.error;\n    // Etherscan keeps changing their string\n    if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n      // Etherscan prefixes the data like \"Reverted 0x1234\"\n      var data = e.data;\n      if (data) {\n        data = \"0x\" + data.replace(/^.*0x/i, \"\");\n      }\n      if (isHexString(data)) {\n        return data;\n      }\n      logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n        error: error,\n        data: \"0x\"\n      });\n    }\n  }\n  // Get the message from any nested error structure\n  var message = error.message;\n  if (error.code === Logger.errors.SERVER_ERROR) {\n    if (error.error && typeof error.error.message === \"string\") {\n      message = error.error.message;\n    } else if (typeof error.body === \"string\") {\n      message = error.body;\n    } else if (typeof error.responseText === \"string\") {\n      message = error.responseText;\n    }\n  }\n  message = (message || \"\").toLowerCase();\n  // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n  if (message.match(/insufficient funds/)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n  // \"Transaction with the same hash was already imported.\"\n  if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n  // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n  if (message.match(/another transaction with same nonce/)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n  if (message.match(/execution failed due to an exception|execution reverted/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n  throw error;\n}\nexport var EtherscanProvider = /*#__PURE__*/function (_BaseProvider) {\n  function EtherscanProvider(network, apiKey) {\n    var _this;\n    _classCallCheck(this, EtherscanProvider);\n    _this = _callSuper(this, EtherscanProvider, [network]);\n    defineReadOnly(_this, \"baseUrl\", _this.getBaseUrl());\n    defineReadOnly(_this, \"apiKey\", apiKey || null);\n    return _this;\n  }\n  _inherits(EtherscanProvider, _BaseProvider);\n  return _createClass(EtherscanProvider, [{\n    key: \"getBaseUrl\",\n    value: function getBaseUrl() {\n      switch (this.network ? this.network.name : \"invalid\") {\n        case \"homestead\":\n          return \"https:/\\/api.etherscan.io\";\n        case \"goerli\":\n          return \"https:/\\/api-goerli.etherscan.io\";\n        case \"sepolia\":\n          return \"https:/\\/api-sepolia.etherscan.io\";\n        case \"matic\":\n          return \"https:/\\/api.polygonscan.com\";\n        case \"maticmum\":\n          return \"https:/\\/api-testnet.polygonscan.com\";\n        case \"arbitrum\":\n          return \"https:/\\/api.arbiscan.io\";\n        case \"arbitrum-goerli\":\n          return \"https:/\\/api-goerli.arbiscan.io\";\n        case \"optimism\":\n          return \"https:/\\/api-optimistic.etherscan.io\";\n        case \"optimism-goerli\":\n          return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n        default:\n      }\n      return logger.throwArgumentError(\"unsupported network\", \"network\", this.network.name);\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(module, params) {\n      var query = Object.keys(params).reduce(function (accum, key) {\n        var value = params[key];\n        if (value != null) {\n          accum += \"&\".concat(key, \"=\").concat(value);\n        }\n        return accum;\n      }, \"\");\n      var apiKey = this.apiKey ? \"&apikey=\".concat(this.apiKey) : \"\";\n      return \"\".concat(this.baseUrl, \"/api?module=\").concat(module).concat(query).concat(apiKey);\n    }\n  }, {\n    key: \"getPostUrl\",\n    value: function getPostUrl() {\n      return \"\".concat(this.baseUrl, \"/api\");\n    }\n  }, {\n    key: \"getPostData\",\n    value: function getPostData(module, params) {\n      params.module = module;\n      params.apikey = this.apiKey;\n      return params;\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(module, params, post) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        var url, payload, procFunc, connection, payloadStr, result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              url = post ? this.getPostUrl() : this.getUrl(module, params);\n              payload = post ? this.getPostData(module, params) : null;\n              procFunc = module === \"proxy\" ? getJsonResult : getResult;\n              this.emit(\"debug\", {\n                action: \"request\",\n                request: url,\n                provider: this\n              });\n              connection = {\n                url: url,\n                throttleSlotInterval: 1000,\n                throttleCallback: function throttleCallback(attempt, url) {\n                  if (_this2.isCommunityResource()) {\n                    showThrottleMessage();\n                  }\n                  return Promise.resolve(true);\n                }\n              };\n              payloadStr = null;\n              if (payload) {\n                connection.headers = {\n                  \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n                };\n                payloadStr = Object.keys(payload).map(function (key) {\n                  return \"\".concat(key, \"=\").concat(payload[key]);\n                }).join(\"&\");\n              }\n              _context.next = 9;\n              return fetchJson(connection, payloadStr, procFunc || getJsonResult);\n            case 9:\n              result = _context.sent;\n              this.emit(\"debug\", {\n                action: \"response\",\n                request: url,\n                response: deepCopy(result),\n                provider: this\n              });\n              return _context.abrupt(\"return\", result);\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this.network);\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      var _this3 = this;\n      var _super = Object.create(null, {\n        perform: {\n          get: function get() {\n            return _superPropGet(EtherscanProvider, \"perform\", _this3, 1);\n          }\n        }\n      });\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var postData, _postData, args, topic0, logs, blocks, i, log, block;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.t0 = method;\n              _context3.next = _context3.t0 === \"getBlockNumber\" ? 3 : _context3.t0 === \"getGasPrice\" ? 4 : _context3.t0 === \"getBalance\" ? 5 : _context3.t0 === \"getTransactionCount\" ? 6 : _context3.t0 === \"getCode\" ? 7 : _context3.t0 === \"getStorageAt\" ? 8 : _context3.t0 === \"sendTransaction\" ? 9 : _context3.t0 === \"getBlock\" ? 10 : _context3.t0 === \"getTransaction\" ? 13 : _context3.t0 === \"getTransactionReceipt\" ? 14 : _context3.t0 === \"call\" ? 15 : _context3.t0 === \"estimateGas\" ? 29 : _context3.t0 === \"getLogs\" ? 41 : _context3.t0 === \"getEtherPrice\" ? 65 : 72;\n              break;\n            case 3:\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_blockNumber\"\n              }));\n            case 4:\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_gasPrice\"\n              }));\n            case 5:\n              return _context3.abrupt(\"return\", this.fetch(\"account\", {\n                action: \"balance\",\n                address: params.address,\n                tag: params.blockTag\n              }));\n            case 6:\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getTransactionCount\",\n                address: params.address,\n                tag: params.blockTag\n              }));\n            case 7:\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getCode\",\n                address: params.address,\n                tag: params.blockTag\n              }));\n            case 8:\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getStorageAt\",\n                address: params.address,\n                position: params.position,\n                tag: params.blockTag\n              }));\n            case 9:\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_sendRawTransaction\",\n                hex: params.signedTransaction\n              }, true).catch(function (error) {\n                return checkError(\"sendTransaction\", error, params.signedTransaction);\n              }));\n            case 10:\n              if (!params.blockTag) {\n                _context3.next = 12;\n                break;\n              }\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getBlockByNumber\",\n                tag: params.blockTag,\n                boolean: params.includeTransactions ? \"true\" : \"false\"\n              }));\n            case 12:\n              throw new Error(\"getBlock by blockHash not implemented\");\n            case 13:\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getTransactionByHash\",\n                txhash: params.transactionHash\n              }));\n            case 14:\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getTransactionReceipt\",\n                txhash: params.transactionHash\n              }));\n            case 15:\n              if (!(params.blockTag !== \"latest\")) {\n                _context3.next = 17;\n                break;\n              }\n              throw new Error(\"EtherscanProvider does not support blockTag for call\");\n            case 17:\n              postData = getTransactionPostData(params.transaction);\n              postData.module = \"proxy\";\n              postData.action = \"eth_call\";\n              _context3.prev = 20;\n              _context3.next = 23;\n              return this.fetch(\"proxy\", postData, true);\n            case 23:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 26:\n              _context3.prev = 26;\n              _context3.t1 = _context3[\"catch\"](20);\n              return _context3.abrupt(\"return\", checkError(\"call\", _context3.t1, params.transaction));\n            case 29:\n              _postData = getTransactionPostData(params.transaction);\n              _postData.module = \"proxy\";\n              _postData.action = \"eth_estimateGas\";\n              _context3.prev = 32;\n              _context3.next = 35;\n              return this.fetch(\"proxy\", _postData, true);\n            case 35:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 38:\n              _context3.prev = 38;\n              _context3.t2 = _context3[\"catch\"](32);\n              return _context3.abrupt(\"return\", checkError(\"estimateGas\", _context3.t2, params.transaction));\n            case 41:\n              args = {\n                action: \"getLogs\"\n              };\n              if (params.filter.fromBlock) {\n                args.fromBlock = checkLogTag(params.filter.fromBlock);\n              }\n              if (params.filter.toBlock) {\n                args.toBlock = checkLogTag(params.filter.toBlock);\n              }\n              if (params.filter.address) {\n                args.address = params.filter.address;\n              }\n              // @TODO: We can handle slightly more complicated logs using the logs API\n              if (params.filter.topics && params.filter.topics.length > 0) {\n                if (params.filter.topics.length > 1) {\n                  logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    topics: params.filter.topics\n                  });\n                }\n                if (params.filter.topics.length === 1) {\n                  topic0 = params.filter.topics[0];\n                  if (typeof topic0 !== \"string\" || topic0.length !== 66) {\n                    logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, {\n                      topic0: topic0\n                    });\n                  }\n                  args.topic0 = topic0;\n                }\n              }\n              _context3.next = 48;\n              return this.fetch(\"logs\", args);\n            case 48:\n              logs = _context3.sent;\n              // Cache txHash => blockHash\n              blocks = {}; // Add any missing blockHash to the logs\n              i = 0;\n            case 51:\n              if (!(i < logs.length)) {\n                _context3.next = 64;\n                break;\n              }\n              log = logs[i];\n              if (!(log.blockHash != null)) {\n                _context3.next = 55;\n                break;\n              }\n              return _context3.abrupt(\"continue\", 61);\n            case 55:\n              if (!(blocks[log.blockNumber] == null)) {\n                _context3.next = 60;\n                break;\n              }\n              _context3.next = 58;\n              return this.getBlock(log.blockNumber);\n            case 58:\n              block = _context3.sent;\n              if (block) {\n                blocks[log.blockNumber] = block.hash;\n              }\n            case 60:\n              log.blockHash = blocks[log.blockNumber];\n            case 61:\n              i++;\n              _context3.next = 51;\n              break;\n            case 64:\n              return _context3.abrupt(\"return\", logs);\n            case 65:\n              if (!(this.network.name !== \"homestead\")) {\n                _context3.next = 67;\n                break;\n              }\n              return _context3.abrupt(\"return\", 0.0);\n            case 67:\n              _context3.t3 = parseFloat;\n              _context3.next = 70;\n              return this.fetch(\"stats\", {\n                action: \"ethprice\"\n              });\n            case 70:\n              _context3.t4 = _context3.sent.ethusd;\n              return _context3.abrupt(\"return\", (0, _context3.t3)(_context3.t4));\n            case 72:\n              return _context3.abrupt(\"break\", 73);\n            case 73:\n              return _context3.abrupt(\"return\", _super.perform.call(this, method, params));\n            case 74:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[20, 26], [32, 38]]);\n      }));\n    }\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n  }, {\n    key: \"getHistory\",\n    value: function getHistory(addressOrName, startBlock, endBlock) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _this4 = this;\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.resolveName(addressOrName);\n            case 2:\n              _context4.t0 = _context4.sent;\n              _context4.t1 = startBlock == null ? 0 : startBlock;\n              _context4.t2 = endBlock == null ? 99999999 : endBlock;\n              params = {\n                action: \"txlist\",\n                address: _context4.t0,\n                startblock: _context4.t1,\n                endblock: _context4.t2,\n                sort: \"asc\"\n              };\n              _context4.next = 8;\n              return this.fetch(\"account\", params);\n            case 8:\n              result = _context4.sent;\n              return _context4.abrupt(\"return\", result.map(function (tx) {\n                [\"contractAddress\", \"to\"].forEach(function (key) {\n                  if (tx[key] == \"\") {\n                    delete tx[key];\n                  }\n                });\n                if (tx.creates == null && tx.contractAddress != null) {\n                  tx.creates = tx.contractAddress;\n                }\n                var item = _this4.formatter.transactionResponse(tx);\n                if (tx.timeStamp) {\n                  item.timestamp = parseInt(tx.timeStamp);\n                }\n                return item;\n              }));\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.apiKey == null;\n    }\n  }]);\n}(BaseProvider);","map":null,"metadata":{},"sourceType":"module"}
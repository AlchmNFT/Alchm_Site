{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:\\\\Users\\\\magnu\\\\s\\\\projects\\\\solidity\\\\Alchm_Site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\magnu\\\\s\\\\projects\\\\solidity\\\\Alchm_Site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\magnu\\\\s\\\\projects\\\\solidity\\\\Alchm_Site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\magnu\\\\s\\\\projects\\\\solidity\\\\Alchm_Site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\magnu\\\\s\\\\projects\\\\solidity\\\\Alchm_Site\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nfunction now() {\n  return new Date().getTime();\n}\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks) {\n  var result = null;\n  for (var i = 0; i < networks.length; i++) {\n    var network = networks[i];\n    // Null! We do not know our network; bail.\n    if (network == null) {\n      return null;\n    }\n    if (result) {\n      // Make sure the network matches the previous networks\n      if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {\n        logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n      }\n    } else {\n      result = network;\n    }\n  }\n  return result;\n}\nfunction median(values, maxDelta) {\n  values = values.slice().sort();\n  var middle = Math.floor(values.length / 2);\n  // Odd length; take the middle\n  if (values.length % 2) {\n    return values[middle];\n  }\n  // Even length; take the average of the two middle\n  var a = values[middle - 1],\n    b = values[middle];\n  if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n    return null;\n  }\n  return (a + b) / 2;\n}\nfunction serialize(value) {\n  if (value === null) {\n    return \"null\";\n  } else if (typeof value === \"number\" || typeof value === \"boolean\") {\n    return JSON.stringify(value);\n  } else if (typeof value === \"string\") {\n    return value;\n  } else if (BigNumber.isBigNumber(value)) {\n    return value.toString();\n  } else if (Array.isArray(value)) {\n    return JSON.stringify(value.map(function (i) {\n      return serialize(i);\n    }));\n  } else if (typeof value === \"object\") {\n    var keys = Object.keys(value);\n    keys.sort();\n    return \"{\" + keys.map(function (key) {\n      var v = value[key];\n      if (typeof v === \"function\") {\n        v = \"[function]\";\n      } else {\n        v = serialize(v);\n      }\n      return JSON.stringify(key) + \":\" + v;\n    }).join(\",\") + \"}\";\n  }\n  throw new Error(\"unknown value type: \" + typeof value);\n}\n// Next request ID to use for emitting debug info\nvar nextRid = 1;\n;\nfunction stall(duration) {\n  var cancel = null;\n  var timer = null;\n  var promise = new Promise(function (resolve) {\n    cancel = function cancel() {\n      if (timer) {\n        clearTimeout(timer);\n        timer = null;\n      }\n      resolve();\n    };\n    timer = setTimeout(cancel, duration);\n  });\n  var wait = function wait(func) {\n    promise = promise.then(func);\n    return promise;\n  };\n  function getPromise() {\n    return promise;\n  }\n  return {\n    cancel: cancel,\n    getPromise: getPromise,\n    wait: wait\n  };\n}\nvar ForwardErrors = [Logger.errors.CALL_EXCEPTION, Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED, Logger.errors.UNPREDICTABLE_GAS_LIMIT];\nvar ForwardProperties = [\"address\", \"args\", \"errorArgs\", \"errorSignature\", \"method\", \"transaction\"];\n;\nfunction exposeDebugConfig(config, now) {\n  var result = {\n    weight: config.weight\n  };\n  Object.defineProperty(result, \"provider\", {\n    get: function get() {\n      return config.provider;\n    }\n  });\n  if (config.start) {\n    result.start = config.start;\n  }\n  if (now) {\n    result.duration = now - config.start;\n  }\n  if (config.done) {\n    if (config.error) {\n      result.error = config.error;\n    } else {\n      result.result = config.result || null;\n    }\n  }\n  return result;\n}\nfunction normalizedTally(normalize, quorum) {\n  return function (configs) {\n    // Count the votes for each result\n    var tally = {};\n    configs.forEach(function (c) {\n      var value = normalize(c.result);\n      if (!tally[value]) {\n        tally[value] = {\n          count: 0,\n          result: c.result\n        };\n      }\n      tally[value].count++;\n    });\n    // Check for a quorum on any given result\n    var keys = Object.keys(tally);\n    for (var i = 0; i < keys.length; i++) {\n      var check = tally[keys[i]];\n      if (check.count >= quorum) {\n        return check.result;\n      }\n    }\n    // No quroum\n    return undefined;\n  };\n}\nfunction getProcessFunc(provider, method, params) {\n  var normalize = serialize;\n  switch (method) {\n    case \"getBlockNumber\":\n      // Return the median value, unless there is (median + 1) is also\n      // present, in which case that is probably true and the median\n      // is going to be stale soon. In the event of a malicious node,\n      // the lie will be true soon enough.\n      return function (configs) {\n        var values = configs.map(function (c) {\n          return c.result;\n        });\n        // Get the median block number\n        var blockNumber = median(configs.map(function (c) {\n          return c.result;\n        }), 2);\n        if (blockNumber == null) {\n          return undefined;\n        }\n        blockNumber = Math.ceil(blockNumber);\n        // If the next block height is present, its prolly safe to use\n        if (values.indexOf(blockNumber + 1) >= 0) {\n          blockNumber++;\n        }\n        // Don't ever roll back the blockNumber\n        if (blockNumber >= provider._highestBlockNumber) {\n          provider._highestBlockNumber = blockNumber;\n        }\n        return provider._highestBlockNumber;\n      };\n    case \"getGasPrice\":\n      // Return the middle (round index up) value, similar to median\n      // but do not average even entries and choose the higher.\n      // Malicious actors must compromise 50% of the nodes to lie.\n      return function (configs) {\n        var values = configs.map(function (c) {\n          return c.result;\n        });\n        values.sort();\n        return values[Math.floor(values.length / 2)];\n      };\n    case \"getEtherPrice\":\n      // Returns the median price. Malicious actors must compromise at\n      // least 50% of the nodes to lie (in a meaningful way).\n      return function (configs) {\n        return median(configs.map(function (c) {\n          return c.result;\n        }));\n      };\n    // No additional normalizing required; serialize is enough\n    case \"getBalance\":\n    case \"getTransactionCount\":\n    case \"getCode\":\n    case \"getStorageAt\":\n    case \"call\":\n    case \"estimateGas\":\n    case \"getLogs\":\n      break;\n    // We drop the confirmations from transactions as it is approximate\n    case \"getTransaction\":\n    case \"getTransactionReceipt\":\n      normalize = function normalize(tx) {\n        if (tx == null) {\n          return null;\n        }\n        tx = shallowCopy(tx);\n        tx.confirmations = -1;\n        return serialize(tx);\n      };\n      break;\n    // We drop the confirmations from transactions as it is approximate\n    case \"getBlock\":\n      // We drop the confirmations from transactions as it is approximate\n      if (params.includeTransactions) {\n        normalize = function normalize(block) {\n          if (block == null) {\n            return null;\n          }\n          block = shallowCopy(block);\n          block.transactions = block.transactions.map(function (tx) {\n            tx = shallowCopy(tx);\n            tx.confirmations = -1;\n            return tx;\n          });\n          return serialize(block);\n        };\n      } else {\n        normalize = function normalize(block) {\n          if (block == null) {\n            return null;\n          }\n          return serialize(block);\n        };\n      }\n      break;\n    default:\n      throw new Error(\"unknown method: \" + method);\n  }\n  // Return the result if and only if the expected quorum is\n  // satisfied and agreed upon for the final result.\n  return normalizedTally(normalize, provider.quorum);\n}\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nfunction waitForSync(config, blockNumber) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var provider;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          provider = config.provider;\n          if (!(provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1)) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt(\"return\", provider);\n        case 3:\n          return _context.abrupt(\"return\", poll(function () {\n            return new Promise(function (resolve, reject) {\n              setTimeout(function () {\n                // We are synced\n                if (provider.blockNumber >= blockNumber) {\n                  return resolve(provider);\n                }\n                // We're done; just quit\n                if (config.cancelled) {\n                  return resolve(null);\n                }\n                // Try again, next block\n                return resolve(undefined);\n              }, 0);\n            });\n          }, {\n            oncePoll: provider\n          }));\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n}\nfunction getRunner(config, currentBlockNumber, method, params) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var provider, filter;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          provider = config.provider;\n          _context2.t0 = method;\n          _context2.next = _context2.t0 === \"getBlockNumber\" ? 4 : _context2.t0 === \"getGasPrice\" ? 4 : _context2.t0 === \"getEtherPrice\" ? 5 : _context2.t0 === \"getBalance\" ? 8 : _context2.t0 === \"getTransactionCount\" ? 8 : _context2.t0 === \"getCode\" ? 8 : _context2.t0 === \"getStorageAt\" ? 13 : _context2.t0 === \"getBlock\" ? 18 : _context2.t0 === \"call\" ? 23 : _context2.t0 === \"estimateGas\" ? 23 : _context2.t0 === \"getTransaction\" ? 30 : _context2.t0 === \"getTransactionReceipt\" ? 30 : _context2.t0 === \"getLogs\" ? 31 : 37;\n          break;\n        case 4:\n          return _context2.abrupt(\"return\", provider[method]());\n        case 5:\n          if (!provider.getEtherPrice) {\n            _context2.next = 7;\n            break;\n          }\n          return _context2.abrupt(\"return\", provider.getEtherPrice());\n        case 7:\n          return _context2.abrupt(\"break\", 37);\n        case 8:\n          if (!(params.blockTag && isHexString(params.blockTag))) {\n            _context2.next = 12;\n            break;\n          }\n          _context2.next = 11;\n          return waitForSync(config, currentBlockNumber);\n        case 11:\n          provider = _context2.sent;\n        case 12:\n          return _context2.abrupt(\"return\", provider[method](params.address, params.blockTag || \"latest\"));\n        case 13:\n          if (!(params.blockTag && isHexString(params.blockTag))) {\n            _context2.next = 17;\n            break;\n          }\n          _context2.next = 16;\n          return waitForSync(config, currentBlockNumber);\n        case 16:\n          provider = _context2.sent;\n        case 17:\n          return _context2.abrupt(\"return\", provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\"));\n        case 18:\n          if (!(params.blockTag && isHexString(params.blockTag))) {\n            _context2.next = 22;\n            break;\n          }\n          _context2.next = 21;\n          return waitForSync(config, currentBlockNumber);\n        case 21:\n          provider = _context2.sent;\n        case 22:\n          return _context2.abrupt(\"return\", provider[params.includeTransactions ? \"getBlockWithTransactions\" : \"getBlock\"](params.blockTag || params.blockHash));\n        case 23:\n          if (!(params.blockTag && isHexString(params.blockTag))) {\n            _context2.next = 27;\n            break;\n          }\n          _context2.next = 26;\n          return waitForSync(config, currentBlockNumber);\n        case 26:\n          provider = _context2.sent;\n        case 27:\n          if (!(method === \"call\" && params.blockTag)) {\n            _context2.next = 29;\n            break;\n          }\n          return _context2.abrupt(\"return\", provider[method](params.transaction, params.blockTag));\n        case 29:\n          return _context2.abrupt(\"return\", provider[method](params.transaction));\n        case 30:\n          return _context2.abrupt(\"return\", provider[method](params.transactionHash));\n        case 31:\n          filter = params.filter;\n          if (!(filter.fromBlock && isHexString(filter.fromBlock) || filter.toBlock && isHexString(filter.toBlock))) {\n            _context2.next = 36;\n            break;\n          }\n          _context2.next = 35;\n          return waitForSync(config, currentBlockNumber);\n        case 35:\n          provider = _context2.sent;\n        case 36:\n          return _context2.abrupt(\"return\", provider.getLogs(filter));\n        case 37:\n          return _context2.abrupt(\"return\", logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n            method: method,\n            params: params\n          }));\n        case 38:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n}\nexport var FallbackProvider = /*#__PURE__*/function (_BaseProvider) {\n  function FallbackProvider(providers, quorum) {\n    var _this;\n    _classCallCheck(this, FallbackProvider);\n    if (providers.length === 0) {\n      logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n    }\n    var providerConfigs = providers.map(function (configOrProvider, index) {\n      if (Provider.isProvider(configOrProvider)) {\n        var stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n        var priority = 1;\n        return Object.freeze({\n          provider: configOrProvider,\n          weight: 1,\n          stallTimeout: stallTimeout,\n          priority: priority\n        });\n      }\n      var config = shallowCopy(configOrProvider);\n      if (config.priority == null) {\n        config.priority = 1;\n      }\n      if (config.stallTimeout == null) {\n        config.stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n      }\n      if (config.weight == null) {\n        config.weight = 1;\n      }\n      var weight = config.weight;\n      if (weight % 1 || weight > 512 || weight < 1) {\n        logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", \"providers[\".concat(index, \"].weight\"), weight);\n      }\n      return Object.freeze(config);\n    });\n    var total = providerConfigs.reduce(function (accum, c) {\n      return accum + c.weight;\n    }, 0);\n    if (quorum == null) {\n      quorum = total / 2;\n    } else if (quorum > total) {\n      logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n    }\n    // Are all providers' networks are known\n    var networkOrReady = checkNetworks(providerConfigs.map(function (c) {\n      return c.provider.network;\n    }));\n    // Not all networks are known; we must stall\n    if (networkOrReady == null) {\n      networkOrReady = new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          _this.detectNetwork().then(resolve, reject);\n        }, 0);\n      });\n    }\n    _this = _callSuper(this, FallbackProvider, [networkOrReady]);\n    // Preserve a copy, so we do not get mutated\n    defineReadOnly(_this, \"providerConfigs\", Object.freeze(providerConfigs));\n    defineReadOnly(_this, \"quorum\", quorum);\n    _this._highestBlockNumber = -1;\n    return _this;\n  }\n  _inherits(FallbackProvider, _BaseProvider);\n  return _createClass(FallbackProvider, [{\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var networks;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return Promise.all(this.providerConfigs.map(function (c) {\n                return c.provider.getNetwork();\n              }));\n            case 2:\n              networks = _context3.sent;\n              return _context3.abrupt(\"return\", checkNetworks(networks));\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _this2 = this;\n        var results, _i, result, processFunc, configs, currentBlockNumber, i, first, _loop, _ret;\n        return _regeneratorRuntime().wrap(function _callee4$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(method === \"sendTransaction\")) {\n                _context6.next = 13;\n                break;\n              }\n              _context6.next = 3;\n              return Promise.all(this.providerConfigs.map(function (c) {\n                return c.provider.sendTransaction(params.signedTransaction).then(function (result) {\n                  return result.hash;\n                }, function (error) {\n                  return error;\n                });\n              }));\n            case 3:\n              results = _context6.sent;\n              _i = 0;\n            case 5:\n              if (!(_i < results.length)) {\n                _context6.next = 12;\n                break;\n              }\n              result = results[_i];\n              if (!(typeof result === \"string\")) {\n                _context6.next = 9;\n                break;\n              }\n              return _context6.abrupt(\"return\", result);\n            case 9:\n              _i++;\n              _context6.next = 5;\n              break;\n            case 12:\n              throw results[0];\n            case 13:\n              if (!(this._highestBlockNumber === -1 && method !== \"getBlockNumber\")) {\n                _context6.next = 16;\n                break;\n              }\n              _context6.next = 16;\n              return this.getBlockNumber();\n            case 16:\n              processFunc = getProcessFunc(this, method, params); // Shuffle the providers and then sort them by their priority; we\n              // shallowCopy them since we will store the result in them too\n              configs = shuffled(this.providerConfigs.map(shallowCopy));\n              configs.sort(function (a, b) {\n                return a.priority - b.priority;\n              });\n              currentBlockNumber = this._highestBlockNumber;\n              i = 0;\n              first = true;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var t0, inflightWeight, _loop2, waiting, results, _result, errors;\n                return _regeneratorRuntime().wrap(function _loop$(_context5) {\n                  while (1) switch (_context5.prev = _context5.next) {\n                    case 0:\n                      t0 = now(); // Compute the inflight weight (exclude anything past)\n                      inflightWeight = configs.filter(function (c) {\n                        return c.runner && t0 - c.start < c.stallTimeout;\n                      }).reduce(function (accum, c) {\n                        return accum + c.weight;\n                      }, 0); // Start running enough to meet quorum\n                      _loop2 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop2() {\n                        var config, rid;\n                        return _regeneratorRuntime().wrap(function _loop2$(_context4) {\n                          while (1) switch (_context4.prev = _context4.next) {\n                            case 0:\n                              config = configs[i++];\n                              rid = nextRid++;\n                              config.start = now();\n                              config.staller = stall(config.stallTimeout);\n                              config.staller.wait(function () {\n                                config.staller = null;\n                              });\n                              config.runner = getRunner(config, currentBlockNumber, method, params).then(function (result) {\n                                config.done = true;\n                                config.result = result;\n                                if (_this2.listenerCount(\"debug\")) {\n                                  _this2.emit(\"debug\", {\n                                    action: \"request\",\n                                    rid: rid,\n                                    backend: exposeDebugConfig(config, now()),\n                                    request: {\n                                      method: method,\n                                      params: deepCopy(params)\n                                    },\n                                    provider: _this2\n                                  });\n                                }\n                              }, function (error) {\n                                config.done = true;\n                                config.error = error;\n                                if (_this2.listenerCount(\"debug\")) {\n                                  _this2.emit(\"debug\", {\n                                    action: \"request\",\n                                    rid: rid,\n                                    backend: exposeDebugConfig(config, now()),\n                                    request: {\n                                      method: method,\n                                      params: deepCopy(params)\n                                    },\n                                    provider: _this2\n                                  });\n                                }\n                              });\n                              if (_this2.listenerCount(\"debug\")) {\n                                _this2.emit(\"debug\", {\n                                  action: \"request\",\n                                  rid: rid,\n                                  backend: exposeDebugConfig(config, null),\n                                  request: {\n                                    method: method,\n                                    params: deepCopy(params)\n                                  },\n                                  provider: _this2\n                                });\n                              }\n                              inflightWeight += config.weight;\n                            case 8:\n                            case \"end\":\n                              return _context4.stop();\n                          }\n                        }, _loop2);\n                      });\n                    case 3:\n                      if (!(inflightWeight < _this2.quorum && i < configs.length)) {\n                        _context5.next = 7;\n                        break;\n                      }\n                      return _context5.delegateYield(_loop2(), \"t0\", 5);\n                    case 5:\n                      _context5.next = 3;\n                      break;\n                    case 7:\n                      // Wait for anything meaningful to finish or stall out\n                      waiting = [];\n                      configs.forEach(function (c) {\n                        if (c.done || !c.runner) {\n                          return;\n                        }\n                        waiting.push(c.runner);\n                        if (c.staller) {\n                          waiting.push(c.staller.getPromise());\n                        }\n                      });\n                      if (!waiting.length) {\n                        _context5.next = 12;\n                        break;\n                      }\n                      _context5.next = 12;\n                      return Promise.race(waiting);\n                    case 12:\n                      // Check the quorum and process the results; the process function\n                      // may additionally decide the quorum is not met\n                      results = configs.filter(function (c) {\n                        return c.done && c.error == null;\n                      });\n                      if (!(results.length >= _this2.quorum)) {\n                        _context5.next = 22;\n                        break;\n                      }\n                      _result = processFunc(results);\n                      if (!(_result !== undefined)) {\n                        _context5.next = 18;\n                        break;\n                      }\n                      // Shut down any stallers\n                      configs.forEach(function (c) {\n                        if (c.staller) {\n                          c.staller.cancel();\n                        }\n                        c.cancelled = true;\n                      });\n                      return _context5.abrupt(\"return\", {\n                        v: _result\n                      });\n                    case 18:\n                      if (first) {\n                        _context5.next = 21;\n                        break;\n                      }\n                      _context5.next = 21;\n                      return stall(100).getPromise();\n                    case 21:\n                      first = false;\n                    case 22:\n                      // No result, check for errors that should be forwarded\n                      errors = configs.reduce(function (accum, c) {\n                        if (!c.done || c.error == null) {\n                          return accum;\n                        }\n                        var code = c.error.code;\n                        if (ForwardErrors.indexOf(code) >= 0) {\n                          if (!accum[code]) {\n                            accum[code] = {\n                              error: c.error,\n                              weight: 0\n                            };\n                          }\n                          accum[code].weight += c.weight;\n                        }\n                        return accum;\n                      }, {});\n                      Object.keys(errors).forEach(function (errorCode) {\n                        var tally = errors[errorCode];\n                        if (tally.weight < _this2.quorum) {\n                          return;\n                        }\n                        // Shut down any stallers\n                        configs.forEach(function (c) {\n                          if (c.staller) {\n                            c.staller.cancel();\n                          }\n                          c.cancelled = true;\n                        });\n                        var e = tally.error;\n                        var props = {};\n                        ForwardProperties.forEach(function (name) {\n                          if (e[name] == null) {\n                            return;\n                          }\n                          props[name] = e[name];\n                        });\n                        logger.throwError(e.reason || e.message, errorCode, props);\n                      });\n                      // All configs have run to completion; we will never get more data\n                      if (!(configs.filter(function (c) {\n                        return !c.done;\n                      }).length === 0)) {\n                        _context5.next = 26;\n                        break;\n                      }\n                      return _context5.abrupt(\"return\", 0);\n                    case 26:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }, _loop);\n              });\n            case 23:\n              if (!true) {\n                _context6.next = 32;\n                break;\n              }\n              return _context6.delegateYield(_loop(), \"t0\", 25);\n            case 25:\n              _ret = _context6.t0;\n              if (!(_ret === 0)) {\n                _context6.next = 28;\n                break;\n              }\n              return _context6.abrupt(\"break\", 32);\n            case 28:\n              if (!_ret) {\n                _context6.next = 30;\n                break;\n              }\n              return _context6.abrupt(\"return\", _ret.v);\n            case 30:\n              _context6.next = 23;\n              break;\n            case 32:\n              // Shut down any stallers; shouldn't be any\n              configs.forEach(function (c) {\n                if (c.staller) {\n                  c.staller.cancel();\n                }\n                c.cancelled = true;\n              });\n              return _context6.abrupt(\"return\", logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n                method: method,\n                params: params,\n                //results: configs.map((c) => c.result),\n                //errors: configs.map((c) => c.error),\n                results: configs.map(function (c) {\n                  return exposeDebugConfig(c);\n                }),\n                provider: this\n              }));\n            case 34:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee4, this);\n      }));\n    }\n  }]);\n}(BaseProvider);","map":null,"metadata":{},"sourceType":"module"}
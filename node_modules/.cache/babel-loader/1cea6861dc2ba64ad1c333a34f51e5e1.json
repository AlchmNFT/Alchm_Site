{"ast":null,"code":"\"use strict\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { getUrl } from \"./geturl\";\nfunction staller(duration) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, duration);\n  });\n}\nfunction bodyify(value, type) {\n  if (value == null) {\n    return null;\n  }\n  if (typeof value === \"string\") {\n    return value;\n  }\n  if (isBytesLike(value)) {\n    if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n      try {\n        return toUtf8String(value);\n      } catch (error) {}\n      ;\n    }\n    return hexlify(value);\n  }\n  return value;\n}\nfunction unpercent(value) {\n  return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, function (all, code) {\n    return String.fromCharCode(parseInt(code, 16));\n  }));\n}\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData(connection, body, processFunc) {\n  // How many times to retry in the event of a throttle\n  var attemptLimit = typeof connection === \"object\" && connection.throttleLimit != null ? connection.throttleLimit : 12;\n  logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n  var throttleCallback = typeof connection === \"object\" ? connection.throttleCallback : null;\n  var throttleSlotInterval = typeof connection === \"object\" && typeof connection.throttleSlotInterval === \"number\" ? connection.throttleSlotInterval : 100;\n  logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n  var errorPassThrough = typeof connection === \"object\" ? !!connection.errorPassThrough : false;\n  var headers = {};\n  var url = null;\n  // @TODO: Allow ConnectionInfo to override some of these values\n  var options = {\n    method: \"GET\"\n  };\n  var allow304 = false;\n  var timeout = 2 * 60 * 1000;\n  if (typeof connection === \"string\") {\n    url = connection;\n  } else if (typeof connection === \"object\") {\n    if (connection == null || connection.url == null) {\n      logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n    }\n    url = connection.url;\n    if (typeof connection.timeout === \"number\" && connection.timeout > 0) {\n      timeout = connection.timeout;\n    }\n    if (connection.headers) {\n      for (var key in connection.headers) {\n        headers[key.toLowerCase()] = {\n          key: key,\n          value: String(connection.headers[key])\n        };\n        if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n          allow304 = true;\n        }\n      }\n    }\n    options.allowGzip = !!connection.allowGzip;\n    if (connection.user != null && connection.password != null) {\n      if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n        logger.throwError(\"basic authentication requires a secure https url\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"url\",\n          url: url,\n          user: connection.user,\n          password: \"[REDACTED]\"\n        });\n      }\n      var authorization = connection.user + \":\" + connection.password;\n      headers[\"authorization\"] = {\n        key: \"Authorization\",\n        value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n      };\n    }\n    if (connection.skipFetchSetup != null) {\n      options.skipFetchSetup = !!connection.skipFetchSetup;\n    }\n    if (connection.fetchOptions != null) {\n      options.fetchOptions = shallowCopy(connection.fetchOptions);\n    }\n  }\n  var reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n  var dataMatch = url ? url.match(reData) : null;\n  if (dataMatch) {\n    try {\n      var response = {\n        statusCode: 200,\n        statusMessage: \"OK\",\n        headers: {\n          \"content-type\": dataMatch[1] || \"text/plain\"\n        },\n        body: dataMatch[2] ? base64Decode(dataMatch[3]) : unpercent(dataMatch[3])\n      };\n      var result = response.body;\n      if (processFunc) {\n        result = processFunc(response.body, response);\n      }\n      return Promise.resolve(result);\n    } catch (error) {\n      logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n        body: bodyify(dataMatch[1], dataMatch[2]),\n        error: error,\n        requestBody: null,\n        requestMethod: \"GET\",\n        url: url\n      });\n    }\n  }\n  if (body) {\n    options.method = \"POST\";\n    options.body = body;\n    if (headers[\"content-type\"] == null) {\n      headers[\"content-type\"] = {\n        key: \"Content-Type\",\n        value: \"application/octet-stream\"\n      };\n    }\n    if (headers[\"content-length\"] == null) {\n      headers[\"content-length\"] = {\n        key: \"Content-Length\",\n        value: String(body.length)\n      };\n    }\n  }\n  var flatHeaders = {};\n  Object.keys(headers).forEach(function (key) {\n    var header = headers[key];\n    flatHeaders[header.key] = header.value;\n  });\n  options.headers = flatHeaders;\n  var runningTimeout = function () {\n    var timer = null;\n    var promise = new Promise(function (resolve, reject) {\n      if (timeout) {\n        timer = setTimeout(function () {\n          if (timer == null) {\n            return;\n          }\n          timer = null;\n          reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            timeout: timeout,\n            url: url\n          }));\n        }, timeout);\n      }\n    });\n    var cancel = function cancel() {\n      if (timer == null) {\n        return;\n      }\n      clearTimeout(timer);\n      timer = null;\n    };\n    return {\n      promise: promise,\n      cancel: cancel\n    };\n  }();\n  var runningFetch = function () {\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var attempt, _response, location, tryAgain, stall, retryAfter, _body, _result, _tryAgain, _timeout;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            attempt = 0;\n          case 1:\n            if (!(attempt < attemptLimit)) {\n              _context.next = 65;\n              break;\n            }\n            _response = null;\n            _context.prev = 3;\n            _context.next = 6;\n            return getUrl(url, options);\n          case 6:\n            _response = _context.sent;\n            if (!(attempt < attemptLimit)) {\n              _context.next = 28;\n              break;\n            }\n            if (!(_response.statusCode === 301 || _response.statusCode === 302)) {\n              _context.next = 15;\n              break;\n            }\n            // Redirection; for now we only support absolute locataions\n            location = _response.headers.location || \"\";\n            if (!(options.method === \"GET\" && location.match(/^https:/))) {\n              _context.next = 13;\n              break;\n            }\n            url = _response.headers.location;\n            return _context.abrupt(\"continue\", 62);\n          case 13:\n            _context.next = 28;\n            break;\n          case 15:\n            if (!(_response.statusCode === 429)) {\n              _context.next = 28;\n              break;\n            }\n            // Exponential back-off throttling\n            tryAgain = true;\n            if (!throttleCallback) {\n              _context.next = 21;\n              break;\n            }\n            _context.next = 20;\n            return throttleCallback(attempt, url);\n          case 20:\n            tryAgain = _context.sent;\n          case 21:\n            if (!tryAgain) {\n              _context.next = 28;\n              break;\n            }\n            stall = 0;\n            retryAfter = _response.headers[\"retry-after\"];\n            if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n              stall = parseInt(retryAfter) * 1000;\n            } else {\n              stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n            }\n            //console.log(\"Stalling 429\");\n            _context.next = 27;\n            return staller(stall);\n          case 27:\n            return _context.abrupt(\"continue\", 62);\n          case 28:\n            _context.next = 34;\n            break;\n          case 30:\n            _context.prev = 30;\n            _context.t0 = _context[\"catch\"](3);\n            _response = _context.t0.response;\n            if (_response == null) {\n              runningTimeout.cancel();\n              logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                requestMethod: options.method,\n                serverError: _context.t0,\n                url: url\n              });\n            }\n          case 34:\n            _body = _response.body;\n            if (allow304 && _response.statusCode === 304) {\n              _body = null;\n            } else if (!errorPassThrough && (_response.statusCode < 200 || _response.statusCode >= 300)) {\n              runningTimeout.cancel();\n              logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                status: _response.statusCode,\n                headers: _response.headers,\n                body: bodyify(_body, _response.headers ? _response.headers[\"content-type\"] : null),\n                requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                requestMethod: options.method,\n                url: url\n              });\n            }\n            if (!processFunc) {\n              _context.next = 60;\n              break;\n            }\n            _context.prev = 37;\n            _context.next = 40;\n            return processFunc(_body, _response);\n          case 40:\n            _result = _context.sent;\n            runningTimeout.cancel();\n            return _context.abrupt(\"return\", _result);\n          case 45:\n            _context.prev = 45;\n            _context.t1 = _context[\"catch\"](37);\n            if (!(_context.t1.throttleRetry && attempt < attemptLimit)) {\n              _context.next = 58;\n              break;\n            }\n            _tryAgain = true;\n            if (!throttleCallback) {\n              _context.next = 53;\n              break;\n            }\n            _context.next = 52;\n            return throttleCallback(attempt, url);\n          case 52:\n            _tryAgain = _context.sent;\n          case 53:\n            if (!_tryAgain) {\n              _context.next = 58;\n              break;\n            }\n            _timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt))); //console.log(\"Stalling callback\");\n            _context.next = 57;\n            return staller(_timeout);\n          case 57:\n            return _context.abrupt(\"continue\", 62);\n          case 58:\n            runningTimeout.cancel();\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n              body: bodyify(_body, _response.headers ? _response.headers[\"content-type\"] : null),\n              error: _context.t1,\n              requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n              requestMethod: options.method,\n              url: url\n            });\n          case 60:\n            runningTimeout.cancel();\n            // If we had a processFunc, it either returned a T or threw above.\n            // The \"body\" is now a Uint8Array.\n            return _context.abrupt(\"return\", _body);\n          case 62:\n            attempt++;\n            _context.next = 1;\n            break;\n          case 65:\n            return _context.abrupt(\"return\", logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n              requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n              requestMethod: options.method,\n              url: url\n            }));\n          case 66:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[3, 30], [37, 45]]);\n    }));\n  }();\n  return Promise.race([runningTimeout.promise, runningFetch]);\n}\nexport function fetchJson(connection, json, processFunc) {\n  var processJsonFunc = function processJsonFunc(value, response) {\n    var result = null;\n    if (value != null) {\n      try {\n        result = JSON.parse(toUtf8String(value));\n      } catch (error) {\n        logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n          body: value,\n          error: error\n        });\n      }\n    }\n    if (processFunc) {\n      result = processFunc(result, response);\n    }\n    return result;\n  };\n  // If we have json to send, we must\n  // - add content-type of application/json (unless already overridden)\n  // - convert the json to bytes\n  var body = null;\n  if (json != null) {\n    body = toUtf8Bytes(json);\n    // Create a connection with the content-type set for JSON\n    var updated = typeof connection === \"string\" ? {\n      url: connection\n    } : shallowCopy(connection);\n    if (updated.headers) {\n      var hasContentType = Object.keys(updated.headers).filter(function (k) {\n        return k.toLowerCase() === \"content-type\";\n      }).length !== 0;\n      if (!hasContentType) {\n        updated.headers = shallowCopy(updated.headers);\n        updated.headers[\"content-type\"] = \"application/json\";\n      }\n    } else {\n      updated.headers = {\n        \"content-type\": \"application/json\"\n      };\n    }\n    connection = updated;\n  }\n  return _fetchData(connection, body, processJsonFunc);\n}\nexport function poll(func, options) {\n  if (!options) {\n    options = {};\n  }\n  options = shallowCopy(options);\n  if (options.floor == null) {\n    options.floor = 0;\n  }\n  if (options.ceiling == null) {\n    options.ceiling = 10000;\n  }\n  if (options.interval == null) {\n    options.interval = 250;\n  }\n  return new Promise(function (resolve, reject) {\n    var timer = null;\n    var done = false;\n    // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n    var cancel = function cancel() {\n      if (done) {\n        return false;\n      }\n      done = true;\n      if (timer) {\n        clearTimeout(timer);\n      }\n      return true;\n    };\n    if (options.timeout) {\n      timer = setTimeout(function () {\n        if (cancel()) {\n          reject(new Error(\"timeout\"));\n        }\n      }, options.timeout);\n    }\n    var retryLimit = options.retryLimit;\n    var attempt = 0;\n    function check() {\n      return func().then(function (result) {\n        // If we have a result, or are allowed null then we're done\n        if (result !== undefined) {\n          if (cancel()) {\n            resolve(result);\n          }\n        } else if (options.oncePoll) {\n          options.oncePoll.once(\"poll\", check);\n        } else if (options.onceBlock) {\n          options.onceBlock.once(\"block\", check);\n          // Otherwise, exponential back-off (up to 10s) our next request\n        } else if (!done) {\n          attempt++;\n          if (attempt > retryLimit) {\n            if (cancel()) {\n              reject(new Error(\"retry limit reached\"));\n            }\n            return;\n          }\n          var timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n          if (timeout < options.floor) {\n            timeout = options.floor;\n          }\n          if (timeout > options.ceiling) {\n            timeout = options.ceiling;\n          }\n          setTimeout(check, timeout);\n        }\n        return null;\n      }, function (error) {\n        if (cancel()) {\n          reject(error);\n        }\n      });\n    }\n    check();\n  });\n}","map":null,"metadata":{},"sourceType":"module"}